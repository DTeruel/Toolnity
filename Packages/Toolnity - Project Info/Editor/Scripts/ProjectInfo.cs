#if UNITY_EDITOR
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace Toolnity.ProjectInfo
{
	public static class ProjectInfo
	{
		#region CONFIG
		private static ProjectInfoConfig config;
		public static ProjectInfoConfig Config
		{
			get
			{
				if (config == null)
				{
					LoadOrCreateConfig();
				}

				return config;
			}
		}

		private static void LoadOrCreateConfig()
		{
			var allAssets = Resources.LoadAll<ProjectInfoConfig>($"");
			if (allAssets.Length > 0)
			{
				config = allAssets[0];
				return;
			}

            #if UNITY_EDITOR
			Debug.Log("[Project Info] No 'Project Info Config' file found in the Resources folders. Creating a new one in \"\\Assets\\Resources\"");

			config = ScriptableObject.CreateInstance<ProjectInfoConfig>();
			config.ProjectName = Application.productName;
			config.Links = new List<ProjectInfoConfig.LinkInfo>();
			
			const string pathFolder = "Assets/Resources/";
			const string assetName = "Project Info Config.asset";
			if (!Directory.Exists("Assets/Resources"))
			{
				Directory.CreateDirectory("Assets/Resources");
			}
			AssetDatabase.CreateAsset(config, pathFolder + assetName);
			AssetDatabase.SaveAssets();
			AssetDatabase.Refresh();
            #else
            Debug.LogError("[Project Info] No 'Project Info Config' file found in the Resources folders. Create one in the editor. ");
            #endif
		}
		#endregion
		
		private const string SCRIPT_PATH = "/Editor/Autogenerated";
		private const string SCRIPT_FILENAME = "/ProjectInfoMenu.cs";
		private const int MENU_LINK_PRIORITY_INDEX = 9000;
		
		[InitializeOnLoadMethod]
		public static void RegenerateMenu()
		{
			Debug.Log("[Project Info] Regenerating Project Info Menu...");
			
            var filePath = Application.dataPath + SCRIPT_PATH;
            var builder = new StringBuilder();
            
            builder.AppendLine("#if UNITY_EDITOR");
            builder.AppendLine("/*******************");
            builder.AppendLine("*  AUTO GENERATED  *");
            builder.AppendLine("/*******************/");
            builder.AppendLine("");
            
            builder.AppendLine("using UnityEngine;");
            builder.AppendLine("using UnityEditor;");
            builder.AppendLine("using Toolnity.ProjectInfo;");
            builder.AppendLine("");
            
            builder.AppendLine("public static class ProjectInfoMenu");
            builder.AppendLine("{");
            builder.AppendLine("\t[MenuItem(\"" + Config.ProjectName + "/Configure\", priority = 10000)]");
            builder.AppendLine("\tprivate static void ConfigureLinks()");
            builder.AppendLine("\t{");
            builder.AppendLine("\t\tSelection.activeObject = ProjectInfo.Config;");
            builder.AppendLine("\t}");
            builder.AppendLine("");

            if (Config != null && Config.Links != null)
            {
	            var namesUsed = new List<string>();
	            for (var i = 0; i < Config.Links.Count; i++)
	            {
		            if (i > 0)
		            {
			            builder.AppendLine("");
		            }

		            var name = Config.Links[i].Name;
		            if (namesUsed.Contains(name))
		            {
			            name += "_" + Random.Range(1000, 10000);
		            }

		            namesUsed.Add(name);
		            builder.AppendLine("\t[MenuItem(\"" + Config.ProjectName + "/Links/" + name +
		                               "\", priority = " + (MENU_LINK_PRIORITY_INDEX + i) + ")]");
		            builder.AppendLine("\tprivate static void OpenURL" + i + "()");
		            builder.AppendLine("\t{");
		            builder.AppendLine("\t\tApplication.OpenURL(\"" + Config.Links[i].URL + "\");");
		            builder.AppendLine("\t}");
	            }
	            namesUsed.Clear();
            }

            builder.AppendLine("}");
            builder.AppendLine("#endif");

            if (!Directory.Exists(filePath))
            {
	            Directory.CreateDirectory(filePath);
            }
            File.WriteAllText(filePath + SCRIPT_FILENAME, builder.ToString());
            AssetDatabase.Refresh();
        }
	}
}
#endif